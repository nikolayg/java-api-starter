/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id "com.diffplug.spotless" version "6.20.0"
    id "com.github.spotbugs" version "5.0.14"
    id "org.owasp.dependencycheck" version "8.1.2"
    id "org.sonarqube" version "4.3.0.3225"
    id 'jacoco'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation "org.junit.jupiter:junit-jupiter:5.9.2"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
    // Mockito
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.2.0'

    // Javalin Web Server
    implementation 'io.javalin:javalin-bundle:5.6.1'
    // Allows Javalin to parse for create JSON
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.0'
    // To read vars from .env file or environment
    // implementation 'io.github.cdimascio:dotenv-java:3.0.0'
}

application {
    // Define the main class for the application.
    mainClass = 'com.nikgrozev.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// https://stackoverflow.com/questions/28450703/how-to-set-the-language-level-in-gradle-so-it-is-ide-agnostic
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
test {
     // report is always generated after tests run
    finalizedBy jacocoTestReport
}
jacocoTestReport {
    // tests are required to run before generating the report
    //  By default, reports go into app/build/reports/jacoco
    dependsOn test
    reports {
        xml.required = true
    }
}


// Based on https://www.baeldung.com/gradle-fat-jar
jar {
    // Based on https://stackoverflow.com/questions/67265308/gradle-entry-classpath-is-a-duplicate-but-no-duplicate-handling-strategy-has-b
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes "Main-Class": application.mainClass
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// Based on https://github.com/diffplug/spotless/tree/main/plugin-gradle
spotless {
  format 'misc', {
    // define the files to apply `misc` to
    target '*.gradle', '*.md', '.gitignore'

    // define the steps to apply to those files
    trimTrailingWhitespace()
    // or tabs/spaces. Takes an integer argument if you don't like 4
    indentWithSpaces()
    endWithNewline()
  }
  java {
    // apply a specific flavor of google-java-format
    googleJavaFormat('1.17.0').aosp().reflowLongStrings()
    // fix formatting of type annotations
    formatAnnotations()
  }
}

// https://github.com/spotbugs/spotbugs-gradle-plugin
// Extensions - https://spotbugs-gradle-plugin.netlify.app/com/github/spotbugs/snom/spotbugsextension
spotbugs {
    ignoreFailures = false
    showStackTraces = true
    showProgress = true
    effort = 'default'
    reportLevel = 'default'
    reportsDir = file("$buildDir/reports/spotbugs")
}
spotbugsMain {
    reports {
        html {
            required = true
        }
    }
}
spotbugsTest {
    reports {
        html {
            required = true
        }
    }
}

// Results will be in app/build/reports/dependency-check-report.html
dependencyCheck {
    // Low(0.1-3.9), Medium(4.0-6.9), High(7.0-8.9), Critical(9.0-10.0)
    failBuildOnCVSS = 7

    // Based on https://github.com/dependency-check/dependency-check-gradle/issues/22#issuecomment-575568801
    def skipConfigurationPatterns = [
        "test.*",
        "spotbugs.*",
        "spotless.*",
        "sonar.*",
        "jacoco.*"
    ]
    allprojects {
        configurations.all { configuration ->
            if (configuration.name in skipConfigurations) {
                return
            }
            skipConfigurationPatterns.each { pattern ->
                if (configuration.name.matches(pattern)) {
                    skipConfigurations << configuration.name
                }
            }
        }
    }
}

// https://docs.sonarsource.com/sonarqube/latest/analyzing-source-code/scanners/sonarscanner-for-gradle/
sonar {
    properties {
        property "sonar.projectKey", rootProject.name
        property "sonar.projectName", rootProject.name
        property "sonar.host.url", "???"
    }
}
